---
name: Reusable workflow to run integration tests with specific images
on:
  workflow_call:
    inputs:
      terraform_api_host:
        description: The hostname to use for Terraform to invoke the CLI.
        default: app.terraform.io
        required: false
        type: string
      image_name:
        description: The image repository and name to use.
        required: false
        default: ghcr.io/fluent/fluent-bit/master
        type: string
      image_tag:
        description: The image tag to use.
        required: false
        default: x86_64
        type: string
      gcp_project_id:
        description: The GCP project to use.
        default: fluent-bit-ci
        required: false
        type: string
    secrets:
      terraform_api_token:
        description: Terraform API Token
        required: true
      gcp_service_account_key:
        description: The GCP service account we want to use provides this token.
        required: true
      grafana_username:
        description: The Grafana (Cloud) username to deploy with.
        required: true
      grafana_password:
        description: The Grafana (Cloud) credentials to deploy with.
        required: true

jobs:

  call-run-integration-test-images-exist:
    name: Test image exists
    # Non-matrix, test images exist first
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ inputs.image_name }}:${{ inputs.image_tag }}
    steps:
      - run: docker pull $IMAGE

  call-run-integration-gcp:
    name: k8s ${{ matrix.k8s-release }} run integration tests on GCP
    needs: call-run-integration-test-images-exist
    strategy:
      fail-fast: false
      matrix:
        k8s-release: [ '1.21' ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: calyptia/fluent-bit-ci

      - uses: frabert/replace-string-action@master
        id: formatted_release
        with:
          pattern: '(.*)\.(.*)$'
          string: ${{ matrix.k8s-release }}
          replace-with: '$1-$2'
          flags: 'g'

      - name: Replace the k8s release
        run: |
          sed -i -e "s/\$K8S_RELEASE/${{ env.k8s_release }}/g" default.auto.tfvars
          sed -i -e "s/\$K8S_FORMATTED/${{ env.k8s_release_formatted }}/g" default.auto.tfvars
          sed -i -e "s/\$K8S_FORMATTED/${{ env.k8s_release_formatted }}/g" config.tf
        working-directory: terraform/gcp/
        env:
          k8s_release: ${{ matrix.k8s-release }}
          k8s_release_formatted: ${{ steps.formatted_release.outputs.replaced }}

      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: ${{ inputs.terraform_api_host }}
          cli_config_credentials_token: ${{ secrets.terraform_api_token }}

      - name: Replace the GCP service account key
        run: |
          cat <<EOT >> default.auto.tfvars
          gcp-sa-key    =  <<-EOF
          ${{ secrets.gcp_service_account_key }}
          EOF
          EOT
        working-directory: terraform/gcp/

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: terraform/gcp/

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/gcp/

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: terraform/gcp/

      - name: Terraform Apply
        run: |
          terraform apply -input=false -auto-approve
        working-directory: terraform/gcp/

      - name: Get the k8s cluster name from terraform output
        id: get-k8s-cluster-name
        run: terraform output -no-color -raw k8s-cluster-name
        working-directory: terraform/gcp/

      - name: Get the k8s cluster location from terraform output
        id: get-k8s-cluster-location
        run: terraform output -no-color -raw k8s-cluster-location
        working-directory: terraform/gcp/

      - name: Get the k8s project id from terraform output
        id: get-gcp-project-id
        run: terraform output -no-color -raw gcp-project-id
        working-directory: terraform/gcp/

      - name: Get the bigquery dataset id from terraform output
        id: get-gcp-bigquery-dataset-id
        run: terraform output -no-color -raw gcp-bigquery-dataset-id
        working-directory: terraform/gcp/

      - name: Get the bigquery table id from terraform output
        id: get-gcp-bigquery-table-id
        run: terraform output -no-color -raw gcp-bigquery-table-id
        working-directory: terraform/gcp/

      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.gcp_service_account_key }}
          export_default_credentials: true

      - uses: google-github-actions/setup-gcloud@v0

      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ steps.get-k8s-cluster-name.outputs.stdout }}
          location: ${{ steps.get-k8s-cluster-location.outputs.stdout }}

      - uses: actions/setup-go@v2
        with:
          go-version: '1.17' # The Go version to download (if necessary) and use.

      - uses: azure/setup-helm@v2.0
        id: install

      - run: go mod download
        working-directory: integration/

      - run: make integration
        env:
          GCP_SA_KEY: ${{ secrets.gcp_service_account_key }}
          GCP_BQ_DATASET_ID: ${{ steps.get-gcp-bigquery-dataset-id.outputs.stdout }}
          GCP_BQ_TABLE_ID: ${{ steps.get-gcp-bigquery-table-id.outputs.stdout }}
          GCP_PROJECT_ID: ${{ inputs.gcp_project_id }}
          IMAGE_REPOSITORY: ${{ inputs.image_name }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          GRAFANA_USERNAME: ${{ secrets.grafana_username }}
          GRAFANA_PASSWORD: ${{ secrets.grafana_password }}
